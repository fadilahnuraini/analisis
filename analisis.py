# -*- coding: utf-8 -*-
"""analisis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eko8oDA5H0VLLE16wQaoIP9Rt4YnB-4K

Langkah : 1
Pertama, kita perlu membuat Dataframe dari dataset, dan bahkan
sebelum itu pustaka tertentu harus diimpor.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
Order_Details = pd.read_csv('/content/1734781967288_Order_details-masked.csv')

"""Langkah 2:
Buat kolom baru bernama Time yang memiliki format DateTime setelah
mengonversi kolom Transaction Date ke dalamnya. Format DateTime,
yang memiliki pola YYYY-MM-DD HH:MM:SS , dapat disesuaikan
sesuai keinginan Anda. Di sini kita lebih tertarik untuk memperoleh jam,
jadi kita dapat memiliki kolom Hour dengan menggunakan fungsi
bawaan untuk hal yang sama
"""

# disini kami telah mengambil Transaksi
# kolom tanggal
Order_Details['Time'] = pd.to_datetime(Order_Details['Transaction Date'])
# Setelah itu mengekstrak jam
# dari kolom Tanggal transaksi
Order_Details['Hour'] = (Order_Details['Time']).dt.hour

"""Langkah 3:
Kemudian, kita memerlukan “n” jam tersibuk. Untuk itu, kita mendapatkan
“n” entri pertama dalam daftar yang berisi tingkat kejadian pada jam-jam
saat transaksi terjadi. Untuk lebih menyederhanakan manipulasi data yang
diberikan dalam Python, kita dapat menggunakan jumlah nilai untuk
frekuensi dan tolist() untuk mengonversi ke format daftar. Kita juga
menyusun daftar nilai indeks terkait.
"""

# n =24 dalam hal ini, dapat dimodifikasi
# sesuai kebutuhan untuk melihat jam tersibuk teratas
timemost1 = Order_Details['Hour'].value_counts().index.tolist()[:24]
timemost2 = Order_Details['Hour'].value_counts().values.tolist()[:24]

"""Langkah 4:
Terakhir, menumpuk indeks (jam) dan frekuensi bersama-sama untuk
menghasilkan hasil akhir.
"""

tmost = np.column_stack((timemost1,timemost2))
print(" Hour Of Day" + "\t" + "Cumulative Number of Purchases \n")
print('\n'.join('\t\t'.join(map(str, row)) for row in tmost))

"""Langkah 5:
Sebelum kita dapat membuat visualisasi data yang sesuai, kita harus
membuat daftar sedikit lebih yang dapat disesuaikan. Untuk
melakukannya, adalah dengan mengumpulkan frekuensi per jam dan
melakukan tugas-tugas berikut
"""

timemost = Order_Details['Hour'].value_counts()
timemost1 = []
for i in range(0,23):
    timemost1.append(i) # Indent this line with 4 spaces

timemost2 = timemost.sort_index()
timemost2.tolist()
timemost2 = pd.DataFrame(timemost2)

"""Langkah 6:
Untuk visualisasi data, selanjutnya dengan Matplotlib untuk pemahaman
yang lebih baik, karena ini adalah salah satu pustaka yang paling nyaman
dan umum digunakan. Tapi, Terserah Anda untuk memilih salah satu
pustaka yang sudah ada sebelumnya seperti Matplotlib, Ggplot, Seaborn,
dll., untuk memplot data secara grafis.
Perintah yang ditulis di bawah ini terutama untuk memastikan bahwa
sumbu X mengambil nilai jam dan sumbu Y mengambil pentingnya jumlah
transaksi yang terpengaruh, dan juga berbagai aspek lain dari bagan garis,
termasuk warna, font, dll., untuk beberapa nama.
"""

plt.figure(figsize=(20, 10))
plt.title('Sales Happening Per Hour (Spread Throughout The Week)',
 fontdict={'fontname': 'monospace', 'fontsize': 30}, y=1.05)
plt.ylabel("Number Of Purchases Made", fontsize=18, labelpad=20)
plt.xlabel("Hour", fontsize=18, labelpad=20)
plt.plot(timemost1, timemost2, color='m')
plt.grid()
plt.show()